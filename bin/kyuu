#!/bin/bash

OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
_server_address=""
_kyuuD_creation_address=""
_stop=""
_rm=""
_verbose=""
_flush=""
_debug=""
_symlink=""

while getopts "a:c:h?srvfdl" opt; do
    case "$opt" in
    h|\?)
        echo " If the kyuu daemon is not mounted at \$KYUUPATH, specify -a followed by a url/port to create a new server with that url address, and mount it at \$KYUUPATH. If it a kyuuD is mounted at \$KYUUPATH, this argument does nothing."
        echo " Specify -c followed by a url/port to connect to that server."
        echo " Specify -d to turn on debug mode."
        echo " Specify -f followed by followed by a list of kyuu names to flush named kyuus of messages. Specifying -v will list all of the messages flushed."
        echo " Specify -h to show this help."
        echo " Specify -l to create queues and then symlink them to the current directory."
        echo " Specify -r followed by a list of kyuu names to delete kyuus and their local symlinks."
        echo " Specify -s to shut down."
        echo " Specify -v for verbose output."
        exit 0
        ;;
    a)  _kyuuD_creation_address=$OPTARG
        ;;
    c)  _server_address=$OPTARG
        ;;
    s)  _stop=1
        ;;
    r)  _rm=1
        ;;
    v)  _verbose=1
        ;;
    f)  _flush=1
        ;;
    d)  _debug=1
        ;;
    l)  _symlink=1
        ;;
    esac
done

[ "${1:-}" = "--" ] && shift

shift $((OPTIND-1))

if [[ $_flush ]]
then
    for queue in $@
    do
        while true
        do
            val=`cat $KYUUPATH/$queue`
            if [[ ! $val ]]
            then
                break
            fi

            if [[ $_verbose ]]
            then
                echo $val
            fi
        done
    done

    exit 0
fi

if [[ $_stop ]]
then
    echo "shutting down."
    fusermount -u $KYUUPATH
    killall kyuuD
    echo "shut down succesfully."
    exit 0
fi

if [[ $_rm ]]
then
    for file in $@
    do
        if [[ $_verbose ]]
        then
            echo "rm'ing $file"
        fi

        rm $file
        rm $KYUUPATH/$file
    done
    exit 0
fi

if [ ! -f "$KYUUPATH/.kyuu_ctl" ]
then
    kyuuD_address_arg=""
    if [[ $_kyuuD_creation_address ]]
    then
        kyuuD_address_arg="-a $_kyuuD_creation_address"
    fi

    # If there's no mounted server, and if we aren't trying
    # to connect to a remote server, then spin a local one up.
    if [[ ! $_server_address ]]
    then
        if [[ $_verbose ]]
        then
            echo "No remote server specified, and no .kyuu_ctl file found. Spinning up a local kyuuD."
        fi

        if [[ $_debug ]]
        then
            kyuuD -v -d $kyuuD_address_arg &
        else
            kyuuD $kyuuD_address_arg &
        fi
    fi

    # if no remote server has been specified, set the
    # address as the default
    if [[ ! $_server_address ]]
    then
        if [[ -z $_kyuuD_creation_address ]]
        then
            _server_address=127.0.0.1:5640
        else
            # if we're handed an address to bind to, and it's 0.0.0.0 - all addresses - make sure to just mount from localhost
            _server_address=`echo $_kyuuD_creation_address | sed 's/0.0.0.0/127.0.0.1/' `
        fi
    fi

    sleep 1

    if [ -z $KYUUPATH ]
    then
        echo "Making a folder for the kyuus at $HOME/kyuus."
        mkdir $HOME/kyuus
        export KYUUPATH=$HOME/kyuus
    fi

    # Mount our kyuu dameon vfs
    if [[ $_debug ]]
    then
        9pfuse -D $_server_address $KYUUPATH
    else
        9pfuse $_server_address $KYUUPATH
    fi
fi

# create and link the queue
for file in $@
do
    if [ -f $KYUUPATH/$file ]
    then
        echo "$file already exists in $KYUUPATH"
    else
        touch $KYUUPATH/$file
    fi

    if [[ $_symlink ]]
    then
        if [ -f $file ]
        then
            echo "$file already exists in local directory"
        else
            ln -s $KYUUPATH/$file .
        fi
    fi
done
